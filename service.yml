schema: kata.ai/schema/merapi/1.0

name: ${package.name}
version: ${package.version}

components:
    # main
    main: Main

    # bot management
    bot: bots/Bot
    deployment: bots/Deployment
    session: bots/Session

    # user management
    user: users/User
    team: users/Team

    # nlu management
    nlu: nlus/Nlu

    # helper
    compile: scripts/Compile
    helper: scripts/Helper
    tester: scripts/Tester

    # api
    api: api/Api
    zaun: api/Zaun


config:
    channels:
        type:
            - line
            - slack
            - generic
            - fbmessenger
            - telegram
            - qiscus

        url:
            line: https://api.line.me
            telegram: https://api.telegram.org
            fbmessenger: https://graph.facebook.com/v2.6/me/messages
            slack: https://slack.com/api
            qiscus: https://<appId>.qiscus.com

commands:
    bot:
        type: group
        desc: Commands for bot management
        subcommands:
            init:
                desc: initialize new bot.yml file
                args: "<name> [version]"
                params:
                    config:
                        type: string
                        desc: param string
                handler: bot.init
                alias: init
            versions:
                desc: list all bot versions
                handler: bot.versions
                alias: versions
            list:
                desc: list all user's bots
                handler: bot.list
                alias: list-bots
            push:
                desc: push and update version bot
                params:
                    rev:
                        type: enum
                        enum:
                            - major
                            - minor
                            - patch
                    tag:
                        type: string
                        desc: tag version for deployment
                    draft:
                        type: string
                handler: bot.update
                alias: push
            pull:
                desc: pull bot with specified name and version
                args: "<name> <version>"
                handler: bot.pull
                alias: pull
            discard:
                desc: discard bot
                params:
                    draft:
                        type: string
                handler: bot.discard
                alias: discard
            delete:
                desc: delete bot
                handler: bot.delete
                alias: remove-bot
            test:
                desc: running test file
                args: "[file]"
                handler: bot.test
                alias: test
            console:
                desc: kata-cli interactive command
                params:
                    session:
                        type: string
                        desc: session id to use in console
                        short: s
                handler: bot.console
                alias: console
    deployment:
        type: group
        desc: Commands for deployment bot
        subcommands:
            deploy:
                desc: create or update deployment
                args: <name> [version]
                handler: deployment.deploy
                alias: deploy
            list:
                desc: list all deployment by bot id
                handler: deployment.list
                alias: list-deployment
            addChannel:
                args: <name> <channelName>
                params:
                    data:
                        type: json
                        desc: channel json data
                        short: d
                handler: deployment.addChannel
                alias: add-channel
            removeChannel:
                desc: remove channel
                args: <name> <channelName>
                handler: deployment.removeChannel
                alias: remove-channel
            drop:
                desc: remove deployment
                args: <name>
                handler: deployment.drop
                alias: drop
    session:
        type: group
        desc: Commands for session management
        subcommands:
            get:
                desc: get session
                args: "<id> [deploymentId]"
                handler: session.get
            create:
                desc: create session
                args: "[id] [deploymentId]"
                params:
                    data:
                        type: json
                        desc: session json object
                        short: d
                    file:
                        type: file
                        desc: file yaml or json contains session
                        short: f
                handler: session.create
            update:
                desc: update session
                args: "<id> [deploymentId]"
                params:
                    data:
                        type: json
                        desc: session json object
                        short: d
                    file:
                        type: file
                        desc: file yaml or json contains session
                        short: f
                handler: session.update
            delete:
                desc: delete session
                args: "<id> [deploymentId]"
                handler: session.delete

    config:
        type: group
        desc: Command for config management
        subcommands:
            view:
                desc: view config stored in .katajson file
                handler: helper.viewConfig

    set:
        type: command
        desc: Command for set property value
        args: "<prop> <value>"
        handler: helper.setProp

    timestamp:
        type: command
        desc: Command for get timestamp
        handler: session.timestamp

    user:
        type: group
        desc: user management
        subcommands:
            createUser:
                desc: create new user
                args: <username>
                params:
                    admin:
                        type: boolean
                        desc: label admin
                        short: a
                    internal:
                        type: boolean
                        desc: label internal
                        short: i
                handler: user.createUser
                alias: create-user
            switch:
                desc: switch between team and user
                args: <type> [name]
                handler: user.switch
                alias: switch
            login:
                desc: login to kata
                params:
                    user:
                        type: string
                        desc: username login
                        short: u
                    password:
                        type: string
                        desc: password login
                        short: p
                    token:
                        type: string
                        desc: token login
                        short: t
                handler: user.login
                alias: login
            logout:
                desc: logout from kata
                handler: user.logout
                alias: logout
            whoami:
                desc: identify current user
                handler: user.whoami
                alias: whoami
            changePassword:
                desc: change current user password
                handler: user.changePassword
                alias: pwd
            createTeam:
                desc: create team
                args: <name>
                handler: user.createTeam
                alias: create-team
            addMember:
                desc: add member to team
                args: <username>
                handler: team.addMember
                params:
                    admin:
                        type: boolean
                        desc: admin label for new member
                        short: a
                alias: add-member
            removeMember:
                desc: remove member from team
                args: <username>
                handler: team.removeMember
                alias: remove-member
    nlu:
        type: group
        desc: command for nlu management
        subcommands:
            push:
                desc: create or update nlu
                handler: nlu.push
                alias: nl-push
            init:
                desc: init nlu file
                handler: nlu.init
                args: "<name> [sandbox]"
                alias: nl-init
            list:
                desc: list nlu
                handler: nlu.listNlus
                args: "[page] [number]"
                alias: list-nlus
            train:
                desc: train nlu
                handler: nlu.train
                params:
                    file:
                        type: string
                        desc: file path contain data training
                        short: f
                    sentence:
                        type: string
                        desc: string to train
                        short: s
                alias: nl-train
            predict:
                desc: predict
                handler: nlu.predict
                params:
                    file:
                        type: string
                        desc: file path contain data to predict
                        short: f
                    sentence:
                        type: string
                        desc: string to predict
                        short: s
                    nlu:
                        type: string
                        desc: nlu to use
                        short: nlu
                alias: nl-predict
            listProfiles:
                desc: list default profiles
                handler: nlu.listProfiles
                alias: list-profiles
            snapshot:
                desc: snapshot profiles
                handler: nlu.snapshot
                alias: nl-snapshot

# entry point
main: main
